version: 0.1
component: build
timeoutInSeconds: 6000
shell: bash
env:
  variables:
    JAVA_HOME: "/usr/lib64/graalvm/graalvm-java21"

  exportedVariables:
    - APP_NAME
    - IMAGE_NAME
    - IMAGE_PATH
    - IMAGE_TAG
    - VERSION
    - BUILD_RESULT

steps:
  - type: Command
    name: "Init exportedVariables"
    timeoutInSeconds: 600
    command: |
      echo "===================== INIT EXPORTEDVARIABLES ====================="
      APP_NAME=homfo_server
      IMAGE_NAME="${APP_NAME}"
      BUILD_RESULT=SUCCESS

      echo "APP_NAME: " $APP_NAME
      echo "IMAGE_NAME: " $IMAGE_NAME

  - type: Command
    name: "Define Image Tag"
    timeoutInSeconds: 600
    command: |
      COMMIT_ID=`echo ${OCI_TRIGGER_COMMIT_HASH} | cut -c 1-7`
      BUILD_RUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      VERSION=$BUILD_RUN_HASH
      [ -z "$COMMIT_ID" ] && IMAGE_TAG=$BUILD_RUN_HASH || IMAGE_TAG=$COMMIT_ID

      echo "COMMIT ID: " $COMMIT_ID
      echo "BUILD_RUN_HASH: " $BUILD_RUN_HASH

  - type: Command
    name: "Define Container Registry"
    timeoutInSeconds: 600
    command: |
      TENANCY_NAMESPACE=`oci os ns get --query data --raw-output`
      REPO_NAME=$APP_NAME
      IMAGE_PATH=$OCI_RESOURCE_PRINCIPAL_REGION.ocir.io/$TENANCY_NAMESPACE/$REPO_NAME

  - type: Command
    name: "Install Oracle GraalVM for JDK 21"
    command: |
      yum -y install graalvm-21-native-image

  - type: Command
    name: "Set PATH Variable"
    command: |
      export PATH=$JAVA_HOME/bin:$PATH

  - type: Command
    name: "Build Source"
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      echo $PATH
      echo "===================== BUILD SOURCE ====================="
      ./gradlew build -x test

    onFailure:
      - type: Command
        timeoutInSeconds: 600
        command: |
          echo "===================== BUILD SOURCE FAILURE ====================="
          BUILD_RESULT=FAILURE
          ./oracle/send_discord_message.sh $BUILD_RESULT $APP_NAME $VERSION $OCI_BUILD_STAGE_NAME $DISCORD_WEBHOOK_URL $OCI_TRIGGER_SOURCE_BRANCH_NAME
  - type: Command
    name: "Install the docker buildx"
    timeoutInSeconds: 600
    command: |
      if ! docker buildx version > /dev/null 2>&1; then
        echo "===================== INSTALL THE DOCKER BUILDX ====================="

        wget -q https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64 -O docker-buildx

        mkdir -p ~/.docker/cli-plugins/
        mv docker-buildx ~/.docker/cli-plugins/docker-buildx

        chmod a+x ~/.docker/cli-plugins/docker-buildx

        echo "buildx installed."
      else
        echo "buildx is already installed."
      fi

  - type: Command
    timeoutInSeconds: 400
    name: "Dockerizer"
    command: |
      echo "Building Docker image for ARM64 architecture..."
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      docker buildx create --name arm64-arch-builder --use
      docker buildx inspect arm64-arch-builder --bootstrap
      docker buildx build --platform linux/arm64/v8 --pull --rm -t ${IMAGE_NAME} . --load

    onFailure:
      - type: Command
        timeoutInSeconds: 600
        command: |
          echo "===================== Dockerizer ====================="
          BUILD_RESULT=FAILURE
          ./oracle/send_discord_message.sh $BUILD_RESULT $APP_NAME $VERSION $OCI_BUILD_STAGE_NAME $DISCORD_WEBHOOK_URL $OCI_TRIGGER_SOURCE_BRANCH_NAME

  - type: Command
    name: "Check exportedVariables"
    timeoutInSeconds: 600
    command: |
      echo "===================== CHECK EXPORTED VARIABLES ====================="
      [ -z "$APP_NAME" ] && APP_NAME=unknown
      [ -z "$IMAGE_PATH" ] && IMAGE_PATH=unknown
      [ -z "$IMAGE_TAG" ] && IMAGE_TAG=unknown
      echo "APP_NAME: " $APP_NAME
      echo "IMAGE_PATH: " $IMAGE_PATH
      echo "IMAGE_NAME : " $IMAGE_NAME
      echo "IMAGE_TAG: " $IMAGE_TAG
      echo "VERSION: " $VERSION
      echo "BUILD_RESULT: " $BUILD_RESULT
      
      ./oracle/send_discord_message.sh $BUILD_RESULT $APP_NAME $VERSION $OCI_BUILD_STAGE_NAME $DISCORD_WEBHOOK_URL $OCI_TRIGGER_SOURCE_BRANCH_NAME $IMAGE_TAG

outputArtifacts:
  - name: homfo_server
    type: DOCKER_IMAGE
    location: homfo_server