plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

def customJacocoReportDir = 'jacoco/reports'

group = 'com.homfo'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("$customJacocoReportDir/html"))

        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/xml/jacoco.xml"))

        csv.required.set(true)
        csv.outputLocation.set(layout.buildDirectory.file("$customJacocoReportDir/csv/jacoco.csv"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "homfo-server"
        property "sonar.projectName", "homfo-server"
        property "sonar.modules", subprojects.collect { it.name }.join(',')
        subprojects.forEach { subproject ->
            property "sonar.${subproject.name}.coverage.jacoco.xmlReportPaths", "${subproject.layout.buildDirectory.get()}/$customJacocoReportDir/xml/jacoco.xml"
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:1.12.2'

    implementation project(':core')
    implementation project(':apps:user')
    implementation project(':domains:domain-common')
    implementation project(':domains:domain-user')

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // open-api
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.register('loadDotEnvFile') {
    if (file('.env').exists()) {
        file('.env').eachLine { line ->
            def (key, value) = line.split('=')
            System.setProperty(key, value)
        }
    }
}

test {
    dependsOn loadDotEnvFile
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
    useJUnitPlatform()
    systemProperties System.getProperties()
}