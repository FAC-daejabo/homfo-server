name: CI

on:
  push:
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Build and analyze
      env:
        SQL_DDL: ${{ secrets.SQL_DDL }}
        MYSQL_IP: ${{ secrets.MYSQL_IP }}
        MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
        MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        USER_ACCESS_TOKEN_SECRET: ${{ secrets.USER_ACCESS_TOKEN_SECRET }}
        USER_ACCESS_TOKEN_EXPIRE: ${{ secrets.USER_ACCESS_TOKEN_EXPIRE }}
        USER_REFRESH_TOKEN_SECRET: ${{ secrets.USER_REFRESH_TOKEN_SECRET }}
        USER_REFRESH_TOKEN_EXPIRE: ${{ secrets.USER_REFRESH_TOKEN_EXPIRE }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew build sonar --info

    - name: Notify Discord about build result
      if: always()
      run: |
        STATUS="${{ job.status }}"

        if [ "$STATUS" == "success" ]; then
          MESSAGE="✅ Build succeeded!"
        else
          MESSAGE="❌ Build failed!"
        fi

        # Pull Request 이벤트에 대한 처리
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          AUTHOR_NAME="${{ github.event.pull_request.user.login }}"
          curl -H "Content-Type:application/json" -d "{\"content\": \"$MESSAGE\n\nType: Pull Request\nAuthor: $AUTHOR_NAME\n\nPR: #$PR_NUMBER from $SOURCE_BRANCH to $TARGET_BRANCH ($PR_URL)\" }" ${{ secrets.DISCORD_WEBHOOK_URL }}
        fi

        # Push 이벤트에 대한 처리
        if [ "${{ github.event_name }}" == "push" ]; then
          COMMIT_REF="${{ github.ref }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          AUTHOR_NAME="${{ github.event.pusher.name }}"
        
          MERGE_PR_REGEX='Merge pull request #([0-9]+) from (.+)/(.+)'

          # PR Merge 이벤트에 대한 처리
          if [[ "${{ github.event.head_commit.message }}" =~ $MERGE_PR_REGEX ]]; then
            PR_NUMBER=${BASH_REMATCH[1]}
            SOURCE_BRANCH=${BASH_REMATCH[3]}
            curl -H "Content-Type:application/json" -d "{\"content\": \"$MESSAGE\n\nType: Merge\nAuthor: $AUTHOR_NAME\n\nMerge for PR #${PR_NUMBER} from '${SOURCE_BRANCH}'\" }" ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -H "Content-Type:application/json" -d "{\"content\": \"$MESSAGE\n\nType: Push\nAuthor: $AUTHOR_NAME\n\nPush to $COMMIT_REF ($COMMIT_URL)\" }" ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi
        fi
      
#
#name: Build
#
#on:
#  push:
#    branches:
#      - main
#
#
#jobs:
#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    permissions: read-all
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#      - name: Cache SonarQube packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Gradle packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#      - name: Build and analyze
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: ./gradlew build sonar --info
#
